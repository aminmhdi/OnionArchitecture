using System.Reflection;
using Dapper.FastCrud;
using Dapper.FastCrud.Mappings;

namespace DataAccess.Configuration.Register
{
    public static class EntityConfig
    {
		/// <summary>
        /// Clears all the recorded entity registrations and entity ORM mappings.
        /// </summary>
        public static void ClearEntityRegistrations()
        {
            OrmConfiguration.ClearEntityRegistrations();
        }

        /// <summary>
        /// Returns the default entity mapping for an entity.
        /// This was either previously set by you in a call to <see cref="EntityConfiguration.RegisterEntity{TEntity}{TEntity}" />
        /// or it was auto-generated by the library.
        /// You can use the returned mappings to create new temporary mappings for the query calls or to override the defaults.
        /// </summary>
        /// <typeparam name="TEntity">Entity type</typeparam>
        public static EntityMapping<TEntity> GetDefaultEntityMapping<TEntity>()
        {
            return OrmConfiguration.GetDefaultEntityMapping<TEntity>() as EntityMapping<TEntity>;
        }

        /// <summary>
        /// Registers a new entity.
        /// Please continue setting up property mappings and other entity options with the returned default entity mapping instance.
        /// </summary>
        /// <typeparam name="TEntity">Entity type</typeparam>
        public static EntityMapping<TEntity> RegisterEntity<TEntity>()
        {
            return OrmConfiguration.RegisterEntity<TEntity>();
        }


        /// <summary>
        /// Registers all types of IEntityConfig
        /// Please use this method on the application start of your project
        /// </summary>
        public static void SetEntitiesConfigurations()
        {
            var instances = from t in Assembly.GetExecutingAssembly().GetTypes()
                where t.GetInterfaces().Contains(typeof(IEntityConfig)) && t.GetConstructor(Type.EmptyTypes) != null
                select Activator.CreateInstance(t) as IEntityConfig;

            foreach (var instance in instances)
            {
                instance.SetConfig();
            }
        }
    }
}
